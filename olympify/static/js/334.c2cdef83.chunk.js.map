{"version":3,"file":"static/js/334.c2cdef83.chunk.js","mappings":"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","sources":["../node_modules/@capacitor/local-notifications/src/web.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport type { PermissionState } from '@capacitor/core';\n\nimport type {\n  DeliveredNotifications,\n  EnabledResult,\n  ListChannelsResult,\n  LocalNotificationSchema,\n  LocalNotificationsPlugin,\n  PendingResult,\n  PermissionStatus,\n  ScheduleOptions,\n  ScheduleResult,\n} from './definitions';\n\nexport class LocalNotificationsWeb\n  extends WebPlugin\n  implements LocalNotificationsPlugin\n{\n  protected pending: LocalNotificationSchema[] = [];\n  protected deliveredNotifications: Notification[] = [];\n\n  async getDeliveredNotifications(): Promise<DeliveredNotifications> {\n    const deliveredSchemas = [];\n    for (const notification of this.deliveredNotifications) {\n      const deliveredSchema: LocalNotificationSchema = {\n        title: notification.title,\n        id: parseInt(notification.tag),\n        body: notification.body,\n      };\n      deliveredSchemas.push(deliveredSchema);\n    }\n    return {\n      notifications: deliveredSchemas,\n    };\n  }\n  async removeDeliveredNotifications(\n    delivered: DeliveredNotifications,\n  ): Promise<void> {\n    for (const toRemove of delivered.notifications) {\n      const found = this.deliveredNotifications.find(\n        n => n.tag === String(toRemove.id),\n      );\n      found?.close();\n      this.deliveredNotifications = this.deliveredNotifications.filter(\n        () => !found,\n      );\n    }\n  }\n  async removeAllDeliveredNotifications(): Promise<void> {\n    for (const notification of this.deliveredNotifications) {\n      notification.close();\n    }\n    this.deliveredNotifications = [];\n  }\n  async createChannel(): Promise<void> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async deleteChannel(): Promise<void> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async listChannels(): Promise<ListChannelsResult> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async schedule(options: ScheduleOptions): Promise<ScheduleResult> {\n    if (!this.hasNotificationSupport()) {\n      throw this.unavailable('Notifications not supported in this browser.');\n    }\n\n    for (const notification of options.notifications) {\n      this.sendNotification(notification);\n    }\n\n    return {\n      notifications: options.notifications.map(notification => ({\n        id: notification.id,\n      })),\n    };\n  }\n\n  async getPending(): Promise<PendingResult> {\n    return {\n      notifications: this.pending,\n    };\n  }\n\n  async registerActionTypes(): Promise<void> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async cancel(pending: ScheduleResult): Promise<void> {\n    this.pending = this.pending.filter(\n      notification =>\n        !pending.notifications.find(n => n.id === notification.id),\n    );\n  }\n\n  async areEnabled(): Promise<EnabledResult> {\n    const { display } = await this.checkPermissions();\n\n    return {\n      value: display === 'granted',\n    };\n  }\n\n  async requestPermissions(): Promise<PermissionStatus> {\n    if (!this.hasNotificationSupport()) {\n      throw this.unavailable('Notifications not supported in this browser.');\n    }\n\n    const display = this.transformNotificationPermission(\n      await Notification.requestPermission(),\n    );\n\n    return { display };\n  }\n\n  async checkPermissions(): Promise<PermissionStatus> {\n    if (!this.hasNotificationSupport()) {\n      throw this.unavailable('Notifications not supported in this browser.');\n    }\n\n    const display = this.transformNotificationPermission(\n      Notification.permission,\n    );\n\n    return { display };\n  }\n\n  protected hasNotificationSupport = (): boolean => {\n    if (!('Notification' in window) || !Notification.requestPermission) {\n      return false;\n    }\n\n    if (Notification.permission !== 'granted') {\n      // don't test for `new Notification` if permission has already been granted\n      // otherwise this sends a real notification on supported browsers\n      try {\n        new Notification('');\n      } catch (e) {\n        if (e.name == 'TypeError') {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  protected transformNotificationPermission(\n    permission: NotificationPermission,\n  ): PermissionState {\n    switch (permission) {\n      case 'granted':\n        return 'granted';\n      case 'denied':\n        return 'denied';\n      default:\n        return 'prompt';\n    }\n  }\n\n  protected sendPending(): void {\n    const toRemove: LocalNotificationSchema[] = [];\n    const now = new Date().getTime();\n\n    for (const notification of this.pending) {\n      if (\n        notification.schedule?.at &&\n        notification.schedule.at.getTime() <= now\n      ) {\n        this.buildNotification(notification);\n        toRemove.push(notification);\n      }\n    }\n\n    this.pending = this.pending.filter(\n      notification => !toRemove.find(n => n === notification),\n    );\n  }\n\n  protected sendNotification(notification: LocalNotificationSchema): void {\n    if (notification.schedule?.at) {\n      const diff = notification.schedule.at.getTime() - new Date().getTime();\n\n      this.pending.push(notification);\n      setTimeout(() => {\n        this.sendPending();\n      }, diff);\n      return;\n    }\n    this.buildNotification(notification);\n  }\n\n  protected buildNotification(\n    notification: LocalNotificationSchema,\n  ): Notification {\n    const localNotification = new Notification(notification.title, {\n      body: notification.body,\n      tag: String(notification.id),\n    });\n    localNotification.addEventListener(\n      'click',\n      this.onClick.bind(this, notification),\n      false,\n    );\n    localNotification.addEventListener(\n      'show',\n      this.onShow.bind(this, notification),\n      false,\n    );\n    localNotification.addEventListener(\n      'close',\n      () => {\n        this.deliveredNotifications = this.deliveredNotifications.filter(\n          () => !this,\n        );\n      },\n      false,\n    );\n    this.deliveredNotifications.push(localNotification);\n    return localNotification;\n  }\n\n  protected onClick(notification: LocalNotificationSchema): void {\n    const data = {\n      actionId: 'tap',\n      notification,\n    };\n    this.notifyListeners('localNotificationActionPerformed', data);\n  }\n\n  protected onShow(notification: LocalNotificationSchema): void {\n    this.notifyListeners('localNotificationReceived', notification);\n  }\n}\n"],"names":["LocalNotificationsWeb","pending","deliveredNotifications","hasNotificationSupport","window","Notification","requestPermission","permission","e","name","deliveredSchemas","this","notification","deliveredSchema","title","id","parseInt","tag","body","push","notifications","delivered","toRemove","found","find","n","String","close","filter","unimplemented","options","unavailable","sendNotification","map","checkPermissions","display","value","transformNotificationPermission","now","Date","getTime","schedule","at","buildNotification","diff","setTimeout","sendPending","localNotification","addEventListener","onClick","bind","onShow","data","actionId","notifyListeners","WebPlugin"],"sourceRoot":""}